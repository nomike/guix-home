--- orig/dap-mode/dap-cpptools.el	2024-04-28 00:13:37.645091766 +0200
+++ dap-mode/dap-cpptools.el	2024-04-28 00:09:33.629969239 +0200
@@ -1,6 +1,7 @@
-;;; dap-cpptools.el --- Debug Adapter Protocol mode for cpptools      -*- lexical-binding: t; -*-
+;;; dap-cpptools.el --- Debug Adapter Protocol mode for cpptools      -*- lexical-binding: t; no-byte-compile: t; -*-
 
 ;; Copyright (C) 2021  Ivan Yonchovski
+;; Copyright (C) 2024  Danny Milosavljevic
 
 ;; Author: Ivan Yonchovski <yyoncho@gmail.com>
 ;; Keywords: language, tools
@@ -64,38 +65,65 @@
   :type 'string)
 
 (defcustom dap-cpptools-debug-program
-  `(,(concat dap-cpptools-debug-path "/extension/debugAdapters/bin/OpenDebugAD7"
-             (if (eq system-type 'windows-nt) ".exe" "")))
+  `("gdb" "-i" "dap")
   "The path to the cpptools debug adapter."
   :group 'dap-cpptools
   :type '(repeat string))
 
+(defun pipe-gdb-version (command)
+  "Get the GDB version string."
+  (with-temp-buffer
+    (call-process command nil t nil "--version")
+    (buffer-string)))
+
+(defun dap-cpptools-requiredp ()
+  "ms-vscode.cpptools is not required when a GDB >= 14 is installed."
+  (let ((adapter-binary (car-safe dap-cpptools-debug-program)))
+    ;; Determine whether to use vscode-cpptools at all.
+    (or (string-match "vscode" adapter-binary)
+        ;; GDB < 14
+        (not (string-match "^GNU gdb [(]GDB[)] 1[4-9][.]"
+              (pipe-gdb-version adapter-binary))))))
+
+(defun dap-cpptools-download-requiredp ()
+  "Figure out whether we need to download ms-vscode.cpptools"
+  (not (file-exists-p dap-cpptools-debug-path)))
+
 (defun dap-cpptools-setup (&optional forced)
-  "Downloading ms-vscode.cpptools to path specified.
-With prefix, FORCED to redownload the extension."
+  "Use GDB >= 14.  If that wouldn't work, download ms-vscode.cpptools to path.
+Use FORCED to redownload the extension."
   (interactive "P")
-  (unless (and (not forced) (file-exists-p dap-cpptools-debug-path))
-    (dap-utils--get-extension dap-cpptools-download-url dap-cpptools-debug-path)
-    (let* ((adapter-binary (cl-first dap-cpptools-debug-program))
-           (adapters-path (f-parent (f-parent adapter-binary)))
-           (extension-bins-path (f-join (f-parent adapters-path) "bin"))
-           (bins
-            (append (mapcar (lambda (path) (f-join extension-bins-path path))
-                            '("cpptools" "cpptools-srv"))
-                    (mapcar (lambda (path) (f-join adapters-path path))
-                            '("bin/createdump" ;; In Linux and OSX versions
-                              ;; Exists in OSX version
-                              "lldb-mi/bin/lldb-mi"
-                              "lldb/bin/lldb-mi"
-                              "lldb/bin/debugserver"
-                              "lldb/bin/lldb-argdumper"
-                              "lldb/bin/lldb-launcher")))))
-      (set-file-modes adapter-binary #o0700)
-      (dolist (bin bins)
-        (when (f-exists? bin)
-          (set-file-modes bin #o700))))
-
-    (message "%s: Downloading done!" "dap-cpptools")))
+  (message "XXX %s" dap-cpptools-debug-program)
+  (when (or forced (dap-cpptools-requiredp))
+    (when (or forced (dap-cpptools-download-requiredp))
+      (message "DOWNLOADING")
+      (dap-utils--get-extension dap-cpptools-download-url dap-cpptools-debug-path)
+      (let* ((adapter-binary (cl-first dap-cpptools-debug-program))
+             (adapters-path (f-parent (f-parent adapter-binary)))
+             (extension-bins-path (f-join (f-parent adapters-path) "bin"))
+             (bins
+              (append (mapcar (lambda (path) (f-join extension-bins-path path))
+                              '("cpptools" "cpptools-srv"))
+                      (mapcar (lambda (path) (f-join adapters-path path))
+                              '("bin/createdump" ;; In Linux and OSX versions
+                                ;; Exists in OSX version
+                                "lldb-mi/bin/lldb-mi"
+                                "lldb/bin/lldb-mi"
+                                "lldb/bin/debugserver"
+                                "lldb/bin/lldb-argdumper"
+                                "lldb/bin/lldb-launcher")))))
+        (set-file-modes adapter-binary #o0700)
+        (dolist (bin bins)
+          (when (f-exists? bin)
+            (set-file-modes bin #o700))))
+
+      (message "DAP-CPPTOOLS %s" dap-cpptools-debug-program)
+      (message "%s: Downloading done!" "dap-cpptools"))
+    ;; Determine whether to enable vscode-cpptools.
+    (when (file-exists-p dap-cpptools-debug-path)
+      (set-default-toplevel-value 'dap-cpptools-debug-program
+       `(,(concat dap-cpptools-debug-path "/extension/debugAdapters/bin/OpenDebugAD7"
+         (if (eq system-type 'windows-nt) ".exe" "")))))))
 
 (defun dap-cpptools--populate-args (conf)
   "Populate auto arguments."
